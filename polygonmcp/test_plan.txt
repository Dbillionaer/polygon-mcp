Polygon MCP Testing Plan
======================

This document outlines a comprehensive testing plan for the Polygon MCP server functionality. Follow these steps in order to verify all components are working correctly.

1. Initial Setup and Environment Verification
-------------------------------------------
1.1. Environment Setup
    - Ensure Node.js v14 or higher is installed
    - Run 'npm install' to install all dependencies
    - Copy .env.example to .env
    - Configure the following in .env:
      * POLYGON_MAINNET_RPC (use a reliable RPC endpoint)
      * POLYGON_MUMBAI_RPC (use Mumbai testnet RPC)
      * ETHEREUM_RPC_URL (use your Alchemy key)
      * POLYGONSCAN_API_KEY (use your Polygonscan API key)
      * SEED_PHRASE (use a test wallet seed phrase)
      * DEFAULT_NETWORK (set to 'mumbai' for testing)

1.2. Network Connection Test
    - Run the following command to test basic connectivity:
      node -e "const { JsonRpcProvider } = require('ethers'); const provider = new JsonRpcProvider(process.env.POLYGON_MUMBAI_RPC); provider.getBlockNumber().then(console.log).catch(console.error);"
    - Verify that it returns a block number without errors

2. Basic Wallet Operations Testing
--------------------------------
2.1. Wallet Connection Test
    - Create a test script (test-wallet.js):
      ```javascript
      const { PolygonMCPServer } = require('./polygon-mcp.js');
      const config = require('./config.json');
      
      async function testWallet() {
        const mcp = new PolygonMCPServer(config);
        mcp.connectWallet(process.env.SEED_PHRASE);
        console.log('Connected wallet address:', mcp.wallet.address);
      }
      
      testWallet().catch(console.error);
      ```
    - Run: node test-wallet.js
    - Verify wallet address is displayed correctly

2.2. Balance Checking
    - Add to test-wallet.js:
      ```javascript
      async function checkBalances() {
        const mcp = new PolygonMCPServer(config);
        mcp.connectWallet(process.env.SEED_PHRASE);
        const balances = await mcp.listBalances();
        console.log('Token balances:', balances);
      }
      ```
    - Run and verify balances are displayed

2.3. Testnet MATIC Request
    - Add to test-wallet.js:
      ```javascript
      async function requestTestnetMatic() {
        const mcp = new PolygonMCPServer(config);
        mcp.connectWallet(process.env.SEED_PHRASE);
        const result = await mcp.getTestnetMatic();
        console.log('Faucet request result:', result);
      }
      ```
    - Run and verify MATIC is received

3. Bridge Operations Testing
---------------------------
3.1. Bridge Status Check
    - Create test-bridge.js:
      ```javascript
      const { PolygonBridge } = require('./bridge-operations.js');
      const config = require('./config.json');
      
      async function testBridge() {
        const bridge = new PolygonBridge(config);
        bridge.connectWallet(process.env.SEED_PHRASE);
        
        // Test bridge status
        const status = await bridge.getTransactionStatus('0x...'); // Use a known tx hash
        console.log('Bridge status:', status);
      }
      ```
    - Run and verify bridge status checking works

3.2. Token Bridge Simulation
    - Add to test-bridge.js:
      ```javascript
      async function simulateBridge() {
        const bridge = new PolygonBridge(config);
        bridge.connectWallet(process.env.SEED_PHRASE);
        
        // Simulate small amount bridge
        const result = await bridge.depositERC20(
          '0x...', // Use a test token address
          '0.1'    // Small amount for testing
        );
        console.log('Bridge simulation result:', result);
      }
      ```
    - Run and verify bridge simulation works

4. DeFi Operations Testing
-------------------------
4.1. QuickSwap Quote Test
    - Create test-defi.js:
      ```javascript
      const { DeFiProtocols } = require('./defi-interactions.js');
      const config = require('./config.json');
      
      async function testQuickswap() {
        const defi = new DeFiProtocols(config);
        defi.connectWallet(process.env.SEED_PHRASE);
        
        // Test quote
        const quote = await defi.getSwapQuote(
          'WMATIC',
          'USDC',
          '0.1'
        );
        console.log('QuickSwap quote:', quote);
      }
      ```
    - Run and verify quotes are received

4.2. Uniswap V3 Quote Test
    - Add to test-defi.js:
      ```javascript
      async function testUniswapV3() {
        const defi = new DeFiProtocols(config);
        defi.connectWallet(process.env.SEED_PHRASE);
        
        // Test quote
        const quote = await defi.getUniswapV3QuoteSingle(
          'WMATIC',
          'USDC',
          '0.1',
          3000
        );
        console.log('Uniswap V3 quote:', quote);
      }
      ```
    - Run and verify quotes are received

5. Transaction Simulation Testing
-------------------------------
5.1. Basic Transaction Simulation
    - Create test-simulation.js:
      ```javascript
      const { TransactionSimulator } = require('./transaction-simulation.js');
      const config = require('./config.json');
      
      async function testSimulation() {
        const simulator = new TransactionSimulator(config);
        simulator.connectWallet(process.env.SEED_PHRASE);
        
        // Test simulation
        const result = await simulator.simulateTransaction({
          to: '0x...', // Use a test address
          value: '0.01',
          data: '0x'
        });
        console.log('Simulation result:', result);
      }
      ```
    - Run and verify simulation works

5.2. Gas Estimation Test
    - Add to test-simulation.js:
      ```javascript
      async function testGasEstimation() {
        const simulator = new TransactionSimulator(config);
        simulator.connectWallet(process.env.SEED_PHRASE);
        
        // Test gas estimation
        const estimate = await simulator.estimateGas({
          to: '0x...', // Use a test address
          value: '0.01',
          data: '0x'
        });
        console.log('Gas estimate:', estimate);
      }
      ```
    - Run and verify gas estimation works

6. Contract Deployment Testing
----------------------------
6.1. Contract Template Test
    - Create test-contract.js:
      ```javascript
      const { ContractTemplates } = require('./contract-templates.js');
      const config = require('./config.json');
      
      async function testContractTemplates() {
        const templates = new ContractTemplates(config);
        templates.connectWallet(process.env.SEED_PHRASE);
        
        // Test template listing
        const list = await templates.listTemplates();
        console.log('Available templates:', list);
      }
      ```
    - Run and verify templates are listed

6.2. Contract Deployment Simulation
    - Add to test-contract.js:
      ```javascript
      async function testDeployment() {
        const templates = new ContractTemplates(config);
        templates.connectWallet(process.env.SEED_PHRASE);
        
        // Test deployment simulation
        const result = await templates.simulateDeployment(
          'ERC20',
          ['Test Token', 'TEST', '1000000']
        );
        console.log('Deployment simulation:', result);
      }
      ```
    - Run and verify deployment simulation works

7. Integration Testing
---------------------
7.1. Full Flow Test
    - Create test-integration.js:
      ```javascript
      const { PolygonMCPServer } = require('./polygon-mcp.js');
      const config = require('./config.json');
      
      async function testFullFlow() {
        const mcp = new PolygonMCPServer(config);
        mcp.connectWallet(process.env.SEED_PHRASE);
        
        // Test complete flow
        console.log('Starting integration test...');
        
        // 1. Check balances
        const balances = await mcp.listBalances();
        console.log('Initial balances:', balances);
        
        // 2. Get testnet MATIC
        const faucet = await mcp.getTestnetMatic();
        console.log('Faucet result:', faucet);
        
        // 3. Simulate transaction
        const simulation = await mcp.simulateTransaction({
          to: '0x...', // Use a test address
          value: '0.01'
        });
        console.log('Transaction simulation:', simulation);
        
        // 4. Get DeFi quote
        const quote = await mcp.getSwapQuote('WMATIC', 'USDC', '0.1');
        console.log('DeFi quote:', quote);
        
        console.log('Integration test completed');
      }
      ```
    - Run and verify all components work together

8. Error Handling Testing
------------------------
8.1. Invalid Input Testing
    - Create test-errors.js:
      ```javascript
      const { PolygonMCPServer } = require('./polygon-mcp.js');
      const config = require('./config.json');
      
      async function testErrorHandling() {
        const mcp = new PolygonMCPServer(config);
        
        // Test invalid address
        try {
          await mcp.getTokenBalance('invalid-address');
        } catch (error) {
          console.log('Invalid address error:', error.message);
        }
        
        // Test invalid amount
        try {
          await mcp.transferFunds('0x...', '-1');
        } catch (error) {
          console.log('Invalid amount error:', error.message);
        }
        
        // Test network errors
        try {
          await mcp.getGasPrice('invalid-network');
        } catch (error) {
          console.log('Network error:', error.message);
        }
      }
      ```
    - Run and verify error handling works

9. Performance Testing
---------------------
9.1. Response Time Test
    - Create test-performance.js:
      ```javascript
      const { PolygonMCPServer } = require('./polygon-mcp.js');
      const config = require('./config.json');
      
      async function testPerformance() {
        const mcp = new PolygonMCPServer(config);
        
        // Test response times
        console.time('balance-check');
        await mcp.listBalances();
        console.timeEnd('balance-check');
        
        console.time('gas-price');
        await mcp.getGasPrice();
        console.timeEnd('gas-price');
        
        console.time('simulation');
        await mcp.simulateTransaction({
          to: '0x...',
          value: '0.01'
        });
        console.timeEnd('simulation');
      }
      ```
    - Run and verify performance metrics

10. Cleanup and Documentation
---------------------------
10.1. Test Results Documentation
     - Create a test-results.md file documenting:
       * All test cases run
       * Success/failure status
       * Any issues encountered
       * Performance metrics
       * Recommendations for improvement

10.2. Environment Cleanup
     - Remove any test transactions
     - Reset environment variables if needed
     - Document any cleanup actions required

Notes:
- Always use testnet (Mumbai) for testing
- Keep test amounts small
- Document any errors or unexpected behavior
- Take screenshots or logs of important results
- Test with different network conditions
- Verify error messages are user-friendly
- Check all security measures are working
- Ensure proper cleanup after tests
